//
//  ayl-Prefix.pch
//  AYLWantToLive
//
//  Created by AYLiOS on 2018/12/19.
//  Copyright © 2018 AYLiOS. All rights reserved.
//

#ifndef ayl_Prefix_pch
#define ayl_Prefix_pch

// Include any system framework and library headers here that should be included in all compilation units.
// You will also need to set the Prefix Header build setting of one or more of your targets to reference this file.
#ifdef __OBJC__

#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>

#import "MJExtension.h"
#import "DefinedKeys.h"
#import "AFNetworking.h"
#import "DataManager.h"
#import "DefinedURLs.h"
#import "BlockDefine.h"
#import "UIImageView+WebCache.h"


#import "RoomInfo.h"


#import "ATTools.h"
#import "ATPickerController.h"
#import "ATCellFactory.h"
#import "ATRootCell.h"
#import "ATPickerView.h"
#import "ATFloatView.h"
#import "UITableViewCell+ATRootCell.h"
#import "ATCollectionCell.h"
#import "ATHouseDetailController.h"
#import "ATKeyInformationCellView.h"
#import "ATHouseDetailController.h"
#import "CHCycleScrollView.h"
#import "ATRoomInfoCellView.h"
#import "ATLocationCellView.h"
#import "ATFacilityCellView.h"
#import "ATLandlordCellView.h"
#import "ATDetailDescribeCellView.h"
#import "UILabel+ATLabel.h"
#import "ATCustomLabel.h"
#import "ATAlertController.h"
#import "CustomPickerView.h"

#import "ATMyHeadModel.h"
#import "ATUserManager.h"

#import "UIFactory.h"

#import "DBManager.h"

#pragma mark - App主色调
#define  ATMainTonalColor              ATRGBA(86, 204, 253, 1.0)    //#56CCFD
#define ATDefaultColor                 ATRGBA(154, 174, 186, 1.0)   //#9AAEBA
#define ATDefaultBackgroundColor       ATRGBA(238, 238, 245, 1.0)   //默认背景颜色

#pragma mark - 控件title


#pragma mark - 屏幕尺寸
#define ATSCREEN_WIDTH [[UIScreen mainScreen] bounds].size.width
#define ATSCREEN_HEIGHT [[UIScreen mainScreen] bounds].size.height

#pragma mark - 常用对象
#define ATApplication [UIApplication sharedApplication]
#define ATAppDelegate ((AppDelegate *)[UIApplication sharedApplication].delegate)
#define ATUserDefaults [NSUserDefaults standardUserDefaults]
#define ATNotificationCenter [NSNotificationCenter defaultCenter]


#pragma mark - 沙盒路径
//沙盒Document路径
#define ATDocumentPath  [NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject]
//沙盒temp路径
#define ATTempPath NSTemporaryDirectory()
//沙盒Cache路径
#define ATCachePath [NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES) firstObject]


#pragma mark - 常用
//APP版本号
#define ATAppVersion [[[NSBundle mainBundle] infoDictionary] objectForKey:@"CFBundleShortVersionString"]
//系统版本号
#define ATSystemVersion [[UIDevice currentDevice] systemVersion]
//获取当前语言
#define ATCurrentLanguage ([[NSLocale preferredLanguages] objectAtIndex:0])
//判断是否为iPhone
#define ATIsiPhone (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPhone)
//判断是否为iPad
#define ATIsiPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
//判断是否为横屏
#define ATIsLandscape ([UIDevice currentDevice].orientation == UIDeviceOrientationLandscapeLeft || [UIDevice currentDevice].orientation == UIDeviceOrientationLandscapeRight)

#pragma mark - 判断系统版本
#define ATiOS6OrLater ([[UIDevice currentDevice].systemVersion doubleValue] >= 6.0)
#define ATiOS7OrLater ([[UIDevice currentDevice].systemVersion doubleValue] >= 7.0)
#define ATiOS8OrLater ([UIDevice currentDevice].systemVersion.floatValue >= 8.0f)
#define ATiOS9OrLater ([UIDevice currentDevice].systemVersion.floatValue >= 9.0f)
#define ATiOS9_1OrLater ([UIDevice currentDevice].systemVersion.floatValue >= 9.1f)
#define ATiOS11OrLater ([UIDevice currentDevice].systemVersion.floatValue >= 11.0f)

#pragma mark - 判断手机型号
#define ATIsiPhone4 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 960), [[UIScreen mainScreen] currentMode].size) : NO)
#define ATIsiPhone5 ([UIScreen instancesRespondToSelector:@selector(currentMode)] ? CGSizeEqualToSize(CGSizeMake(640, 1136), [[UIScreen mainScreen] currentMode].size) : NO)

#pragma mark - 测试的时候打印语句，发布程序的时候自动去除打印语句
#ifdef DEBUG
#define ATLog(FORMAT, ...) fprintf(stderr,"错误日志methodName:%s  lineNumbers:%d\n~~~~~~>: %s\n", __func__,__LINE__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String])
#else
#define ATLog(FORMAT, ...) nil
#endif



//#ifdef DEBUG
//#define NSLog(FORMAT, ...) fprintf(stderr,"时间:%s 行号:%d 文件名:%s/t方法名:%s/n%s/n", __TIME__,__LINE__,[[[NSString stringWithUTF8String:__FILE__] lastPathComponent] UTF8String],__func__, [[NSString stringWithFormat:FORMAT, ##__VA_ARGS__] UTF8String])
//#else
//#define NSLog(FORMAT, ...) nil
//#endif


#pragma mark - 获取颜色
#define ATRGBA(r, g, b, a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]



#pragma mark - 宏定义的序列化与反序列化
#define WZLSERIALIZE_CODER_DECODER()     \
\
- (id)initWithCoder:(NSCoder *)coder    \
{   \
NSLog(@"%s",__func__);  \
Class cls = [self class];   \
while (cls != [NSObject class]) {   \
/*判断是自身类还是父类*/    \
BOOL bIsSelfClass = (cls == [self class]);  \
unsigned int iVarCount = 0; \
unsigned int propVarCount = 0;  \
unsigned int sharedVarCount = 0;    \
Ivar *ivarList = bIsSelfClass ? class_copyIvarList([cls class], &iVarCount) : NULL;/*变量列表，含属性以及私有变量*/   \
objc_property_t *propList = bIsSelfClass ? NULL : class_copyPropertyList(cls, &propVarCount);/*属性列表*/   \
sharedVarCount = bIsSelfClass ? iVarCount : propVarCount;   \
\
for (int i = 0; i < sharedVarCount; i++) {  \
const char *varName = bIsSelfClass ? ivar_getName(*(ivarList + i)) : property_getName(*(propList + i)); \
NSString *key = [NSString stringWithUTF8String:varName];   \
id varValue = [coder decodeObjectForKey:key];   \
NSArray *filters = @[@"superclass", @"description", @"debugDescription", @"hash"]; \
if (varValue && [filters containsObject:key] == NO) { \
[self setValue:varValue forKey:key];    \
}   \
}   \
free(ivarList); \
free(propList); \
cls = class_getSuperclass(cls); \
}   \
return self;    \
}   \
\
- (void)encodeWithCoder:(NSCoder *)coder    \
{   \
NSLog(@"%s",__func__);  \
Class cls = [self class];   \
while (cls != [NSObject class]) {   \
/*判断是自身类还是父类*/    \
BOOL bIsSelfClass = (cls == [self class]);  \
unsigned int iVarCount = 0; \
unsigned int propVarCount = 0;  \
unsigned int sharedVarCount = 0;    \
Ivar *ivarList = bIsSelfClass ? class_copyIvarList([cls class], &iVarCount) : NULL;/*变量列表，含属性以及私有变量*/   \
objc_property_t *propList = bIsSelfClass ? NULL : class_copyPropertyList(cls, &propVarCount);/*属性列表*/ \
sharedVarCount = bIsSelfClass ? iVarCount : propVarCount;   \
\
for (int i = 0; i < sharedVarCount; i++) {  \
const char *varName = bIsSelfClass ? ivar_getName(*(ivarList + i)) : property_getName(*(propList + i)); \
NSString *key = [NSString stringWithUTF8String:varName];    \
/*valueForKey只能获取本类所有变量以及所有层级父类的属性，不包含任何父类的私有变量(会崩溃)*/  \
id varValue = [self valueForKey:key];   \
NSArray *filters = @[@"superclass", @"description", @"debugDescription", @"hash"]; \
if (varValue && [filters containsObject:key] == NO) { \
[coder encodeObject:varValue forKey:key];   \
}   \
}   \
free(ivarList); \
free(propList); \
cls = class_getSuperclass(cls); \
}   \
}

/* 封装归档keyedArchiver操作 */
#define WZLSERIALIZE_ARCHIVE(__objToBeArchived__, __key__, __filePath__)    \
\
NSMutableData *data = [NSMutableData data]; \
NSKeyedArchiver *archiver = [[NSKeyedArchiver alloc] initForWritingWithMutableData:data];   \
[archiver encodeObject:__objToBeArchived__ forKey:__key__];    \
[archiver finishEncoding];  \
[data writeToFile:__filePath__ atomically:YES]


/* 封装反归档keyedUnarchiver操作 */
#define WZLSERIALIZE_UNARCHIVE(__objToStoreData__, __key__, __filePath__)   \
NSMutableData *dedata = [NSMutableData dataWithContentsOfFile:__filePath__]; \
NSKeyedUnarchiver *unarchiver = [[NSKeyedUnarchiver alloc] initForReadingWithData:dedata];  \
__objToStoreData__ = [unarchiver decodeObjectForKey:__key__];  \
[unarchiver finishDecoding]










#endif
#endif /* ayl_Prefix_pch */
